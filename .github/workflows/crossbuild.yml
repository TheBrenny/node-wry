name: 'Crossbuild and test'
env:
  DEBUG: 'napi:*'
  MACOSX_DEPLOYMENT_TARGET: '10.13'
  APP_NAME: 'node-wry'
on:
  push:
    branches:
      - main
    tags-ignore:
      - '**'
    paths-ignore:
      - '**/*.md'
      - LICENSE
      - '**/*.gitignore'
      - .editorconfig
      - docs/**

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        target:
          [
            "aarch64-apple-darwin",
            "aarch64-unknown-linux-gnu",
            "aarch64-unknown-linux-musl",
            "aarch64-pc-windows-msvc",
            "armv7-unknown-linux-gnueabihf",
            "x86_64-unknown-linux-musl",
            "x86_64-unknown-freebsd",
            "i686-pc-windows-msvc",
            "universal-apple-darwin"
          ]
    name: ${{ matrix.target }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Prepare Rust Toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
          target: ${{ matrix.target }}
      - name: Prepare Rust Cache
        uses: Swatinem/rust-cache@v2
      - name: Prepare PNPM
        uses: pnpm/action-setup@v2
        with:
          version: 7.22.0
      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: 16
          check-latest: true
          cache: 'pnpm'
      - name: Install ziglang
        uses: goto-bus-stop/setup-zig@v1
        with:
          version: 0.10.0
      - name: Install Cargo-xwin
        run: cargo install cargo-xwin
      - name: Install Node dependencies
        run: pnpm install
      - name: Build
        run: pnpm build --zig --target ${{ matrix.target }}
      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: bindings-${{ matrix.target }}
          path: ./*.node
          if-no-files-found: error
  test-host:
    if: '0' == '1'
    strategy:
      fail-fast: false
      matrix:
        settings:
          - target: x86_64-apple-darwin
            host: macos-latest
          - target: x86_64-pc-windows-msvc
            host: windows-latest
          - target: i686-pc-windows-msvc
            host: windows-latest
    runs-on: ${{ matrix.settings.host }}
    needs:
      - build
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Prepare PNPM
        uses: pnpm/action-setup@v2
        with:
          version: 7.22.0
      - uses: actions/setup-node@v3
        with:
          node-version: 16
          check-latest: true
          cache: 'pnpm'
      - name: Setup node x86
        if: matrix.settings.target == 'i686-pc-windows-msvc'
        run: pnpm config set supportedArchitectures.cpu "ia32"
        shell: bash
      - name: Install dependencies
        run: pnpm install
      - name: Setup node x86
        uses: actions/setup-node@v3
        if: matrix.settings.target == 'i686-pc-windows-msvc'
        with:
          node-version: 16
          check-latest: true
          cache: 'pnpm'
          architecture: x86
      - name: Download bindings
        uses: actions/download-artifact@v3
        with:
          name: bindings-${{ matrix.settings.target }}
          path: ./
      - name: Run tests
        run: pnpm test
  test-docker:
    strategy:
      fail-fast: false
      matrix:
        settings:
          - target: x86_64-unknown-linux-gnu
            docker: node:18-slim
            setup: 'exit 0'
          - target: aarch64-unknown-linux-gnu
            docker: ghcr.io/napi-rs/napi-rs/nodejs:aarch64-18
            setup: 'exit 0'
          - target: x86_64-unknown-linux-musl
            docker: node:18-alpine
            setup: 'exit 0'
          - target: aarch64-unknown-linux-musl
            docker: multiarch/alpine:aarch64-latest-stable
            setup: |
              apk add --no-cache nodejs npm
              npm install -g pnpm
          - target: armv7-unknown-linux-gnueabihf
            docker: ghcr.io/napi-rs/napi-rs/nodejs:armhf-18
            setup: 'exit 0'
    runs-on: ubuntu-latest
    needs:
      - build
    steps:
      - run: docker run --rm --privileged multiarch/qemu-user-static:register --reset
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 16
          check-latest: true
          cache: 'pnpm'
      - name: Install dependencies
        run: pnpm install
      - name: Download bindings
        uses: actions/download-artifact@v3
        with:
          name: bindings-${{ matrix.settings.target }}
          path: ./
      - name: Run tests
        uses: addnab/docker-run-action@v3
        with:
          image: ${{ matrix.settings.docker }}
          options: -v ${{ github.workspace }}:/build -w /build
          run: |
            set -e
            ${{ matrix.settings.setup }}
            pnpm test